// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  
  events        Event[]
  registrations Registration[]
  accounts      Account[]
  sessions      Session[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  imageUrl    String?
  price       Float    @default(0)
  maxCapacity Int      @default(100)
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  registrations Registration[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Registration {
  id      Int   @id @default(autoincrement())
  userId  Int
  eventId Int
  user    User  @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])
  registeredAt DateTime @default(now())
  
  @@unique([userId, eventId])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
